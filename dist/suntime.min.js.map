{"version":3,"file":"suntime.min.js","sources":["../src/main.js"],"sourcesContent":["'use strict';\n\nconst PI = Math.PI;\nconst DR = PI / 180;\nconst K1 = 15 * DR * 1.0027379;\n\n// Local Sidereal Time for zone\nconst lst = (lon, jd, z) => {\n  let s = 24110.5 + (8640184.812999999 * jd) / 36525 + 86636.6 * z + 86400 * lon;\n\n  s = s / 86400;\n  s = s - Math.floor(s);\n\n  return s * 360 * DR;\n};\n\n// returns value for sign of argument\nconst sgn = x => (x > 0 ? 1 : x < 0 ? -1 : 0);\n\n// format a positive integer with leading zeroes\nconst zintstr = (num, width) => {\n  const str = num.toString(10);\n  const len = str.length;\n  let intgr = '';\n\n  for (let i = 0; i < width - len; i++) {\n    intgr += '0';\n  }\n\n  for (let i = 0; i < len; i++) {\n    intgr += str.charAt(i);\n  }\n\n  return intgr;\n};\n\n/**\n * suntime\n * Calculate sunset and sunrise times for given date and coordinates.\n *\n * @param {Date} d The date you want to find the sun data for.\n * @param {Number} lat The latitude.\n * @param {Number} lon The longitude.\n * @returns {Object} An object containing:\n *    - `sunrise` (Object):\n *      - `raw_time` (Array): An array of two numbers (hours and minutes)\n *      - `time` (String): Formatted sunrise time (`HH:mm`)\n *    - `sunset` (Object):\n *      - `raw_time` (Array): An array of two numbers (hours and minutes)\n *      - `time` (String): Formatted sunset time (`HH:mm`)\n *    - `date` (Date): The provided date.\n *    - `coordinates` (Array): An array of latitude and longitude values.\n *\n */\nmodule.exports = function suntime(d, lat, lon) {\n  const Rise_time = [0, 0];\n  const Set_time = [0, 0];\n\n  let Sunrise = false;\n  let Sunset = false;\n\n  let Rise_az = 0.0;\n  let Set_az = 0.0;\n\n  const Sky = [0.0, 0.0];\n  const RAn = [0.0, 0.0, 0.0];\n  const Dec = [0.0, 0.0, 0.0];\n  const VHz = [0.0, 0.0, 0.0];\n\n  // determine Julian day from calendar date\n  // (Jean Meeus, \"Astronomical Algorithms\", Willmann-Bell, 1991)\n  const julian_day = d => {\n    let a, b, jd;\n    let gregorian;\n    let year = d.getFullYear();\n    let month = d.getMonth() + 1;\n    const day = d.getDate();\n\n    gregorian = year < 1583 ? false : true;\n\n    if (month == 1 || month == 2) {\n      year = year - 1;\n      month = month + 12;\n    }\n\n    a = Math.floor(year / 100);\n\n    if (gregorian) {\n      b = 2 - a + Math.floor(a / 4);\n    } else {\n      b = 0.0;\n    }\n\n    jd = Math.floor(365.25 * (year + 4716)) + Math.floor(30.6001 * (month + 1)) + day + b - 1524.5;\n\n    return jd;\n  };\n\n  // test an hour for an event\n  const test_hour = (k, zone, t0, lat) => {\n    const ha = new Array(3);\n    let a, b, c, d, e, s, z;\n    let hr, min, time;\n    let az, dz, hz, nz;\n\n    ha[0] = t0 - RAn[0] + k * K1;\n    ha[2] = t0 - RAn[2] + k * K1 + K1;\n    ha[1] = (ha[2] + ha[0]) / 2; // hour angle at half hour\n    Dec[1] = (Dec[2] + Dec[0]) / 2; // declination at half hour\n    s = Math.sin(lat * DR);\n    c = Math.cos(lat * DR);\n    z = Math.cos(90.833 * DR); // refraction + sun semidiameter at horizon\n\n    if (k <= 0) {\n      VHz[0] = s * Math.sin(Dec[0]) + c * Math.cos(Dec[0]) * Math.cos(ha[0]) - z;\n    }\n\n    VHz[2] = s * Math.sin(Dec[2]) + c * Math.cos(Dec[2]) * Math.cos(ha[2]) - z;\n\n    if (sgn(VHz[0]) == sgn(VHz[2])) {\n      return VHz[2]; // no event this hour\n    }\n\n    VHz[1] = s * Math.sin(Dec[1]) + c * Math.cos(Dec[1]) * Math.cos(ha[1]) - z;\n    a = 2 * VHz[0] - 4 * VHz[1] + 2 * VHz[2];\n    b = -3 * VHz[0] + 4 * VHz[1] - VHz[2];\n    d = b * b - 4 * a * VHz[0];\n\n    if (d < 0) {\n      return VHz[2]; // no event this hour\n    }\n\n    d = Math.sqrt(d);\n    e = (-b + d) / (2 * a);\n\n    if (e > 1 || e < 0) {\n      e = (-b - d) / (2 * a);\n    }\n\n    time = k + e + 1 / 120; // time of an event\n    hr = Math.floor(time);\n    min = Math.floor((time - hr) * 60);\n    hz = ha[0] + e * (ha[2] - ha[0]); // azimuth of the sun at the event\n    nz = -Math.cos(Dec[1]) * Math.sin(hz);\n    dz = c * Math.sin(Dec[1]) - s * Math.cos(Dec[1]) * Math.cos(hz);\n    az = Math.atan2(nz, dz) / DR;\n\n    if (az < 0) {\n      az = az + 360;\n    }\n\n    if (VHz[0] < 0 && VHz[2] > 0) {\n      Rise_time[0] = hr;\n      Rise_time[1] = min;\n      Rise_az = az;\n      Sunrise = true;\n    }\n\n    if (VHz[0] > 0 && VHz[2] < 0) {\n      Set_time[0] = hr;\n      Set_time[1] = min;\n      Set_az = az;\n      Sunset = true;\n    }\n\n    return VHz[2];\n  };\n\n  // sun's position using fundamental arguments\n  // (Van Flandern & Pulkkinen, 1979)\n  const sun = (jd, ct) => {\n    let g, lo, s, u, v, w;\n\n    lo = 0.779072 + 0.00273790931 * jd;\n    lo = lo - Math.floor(lo);\n    lo = lo * 2 * PI;\n    g = 0.993126 + 0.0027377785 * jd;\n    g = g - Math.floor(g);\n    g = g * 2 * PI;\n    v = 0.39785 * Math.sin(lo);\n    v = v - 0.01 * Math.sin(lo - g);\n    v = v + 0.00333 * Math.sin(lo + g);\n    v = v - 0.00021 * ct * Math.sin(lo);\n    u = 1 - 0.03349 * Math.cos(g);\n    u = u - 0.00014 * Math.cos(2 * lo);\n    u = u + 0.00008 * Math.cos(lo);\n    w = -0.0001 - 0.04129 * Math.sin(2 * lo);\n    w = w + 0.03211 * Math.sin(g);\n    w = w + 0.00104 * Math.sin(2 * lo - g);\n    w = w - 0.00035 * Math.sin(2 * lo + g);\n    w = w - 0.00008 * ct * Math.sin(g);\n    s = w / Math.sqrt(u - v * v); // compute sun's right ascension\n    Sky[0] = lo + Math.atan(s / Math.sqrt(1 - s * s));\n    s = v / Math.sqrt(u); // ...and declination\n    Sky[1] = Math.atan(s / Math.sqrt(1 - s * s));\n  };\n\n  const zone = Math.round(d.getTimezoneOffset() / 60);\n  let jd = julian_day(d) - 2451545; // Julian day relative to Jan 1.5, 2000\n\n  if (sgn(zone) === sgn(lon) && zone) {\n    return {\n      error: 'Invalid input data.',\n    };\n  }\n\n  lon = lon / 360;\n\n  const tz = zone / 24;\n  const ct = jd / 36525 + 1; // centuries since 1900.0\n  const t0 = lst(lon, jd, tz); // local sidereal time\n\n  jd += tz; // get sun position at start of day\n  sun(jd, ct);\n\n  const ra0 = Sky[0];\n  const dec0 = Sky[1];\n\n  ++jd; // get sun position at end of day\n  sun(jd, ct);\n\n  let ra1 = Sky[0];\n  const dec1 = Sky[1];\n\n  // make continuous\n  if (ra1 < ra0) {\n    ra1 += 2 * PI;\n  }\n\n  RAn[0] = ra0;\n  Dec[0] = dec0;\n\n  // check each hour of this day\n  for (let k = 0; k < 24; ++k) {\n    RAn[2] = ra0 + ((k + 1) * (ra1 - ra0)) / 24;\n    Dec[2] = dec0 + ((k + 1) * (dec1 - dec0)) / 24;\n    VHz[2] = test_hour(k, zone, t0, lat);\n\n    // advance to next hour\n    RAn[0] = RAn[2];\n    Dec[0] = Dec[2];\n    VHz[0] = VHz[2];\n  }\n\n  const result = {};\n  // This will create the sunset and sunrise fields in the return object\n  const setSunriseOrSunset = (key, time, az) => {\n    const item = (result[key] = {\n      raw_time: time,\n      angle: az,\n    });\n\n    item.time = zintstr(time[0], 2) + ':' + zintstr(time[1], 2);\n    item.formatted = `${item.raw_time[0]}:${item.raw_time[1]}, az = ${item.angle}Â°`;\n  };\n\n  setSunriseOrSunset('sunrise', Rise_time, Rise_az);\n  setSunriseOrSunset('sunset', Set_time, Set_az);\n\n  // Special message\n  if (!Sunrise && !Sunset) {\n    if (VHz[2] < 0) {\n      result.special_message = 'The sun is under the horizon the whole day.';\n    } else {\n      result.special_message = 'The sun is above the horizon the whole day.';\n    }\n  } else {\n    if (!Sunrise) {\n      result.special_message = \"The sun doesn't rise.\";\n    } else if (!Sunset) {\n      result.special_message = \"The sun doesn't set.\";\n    }\n  }\n\n  result.date = d;\n  result.coordinates = [lat, lon];\n\n  return result;\n};\n"],"names":["PI","Math","DR","K1","sgn","x","zintstr","num","width","str","toString","len","length","intgr","i","charAt","d","lat","lon","Rise_time","Set_time","Sunrise","Sunset","Rise_az","Set_az","Sky","RAn","Dec","VHz","test_hour","k","zone","t0","a","b","c","e","s","z","hr","min","time","az","dz","hz","nz","ha","Array","sin","cos","sqrt","floor","atan2","sun","jd","ct","g","lo","u","v","w","atan","round","getTimezoneOffset","gregorian","year","getFullYear","month","getMonth","day","getDate","julian_day","error","tz","lst","ra0","dec0","ra1","dec1","result","setSunriseOrSunset","key","item","raw_time","angle","formatted","special_message","date","coordinates"],"mappings":"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"}